% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dtwcomparator.R
\name{analyze.mocap}
\alias{analyze.mocap}
\title{This function perfomrs motion capture dat analysis based on Dynamic Time Warping.}
\usage{
analyze.mocap(data.configuration, ref.d = NULL, in.d = NULL,
  extremumtreshold = 0.66, smoothSize = 0.1)
}
\arguments{
\item{data.configuration}{a list contaning configuration for the algorithm. Eachelement of the list is a list with following elements (all elements are obligatory):
\itemize{
\item x1 - reference signal for DTW (vectors list),
\item x2 - second signal for DTW (vectors list),
\item FUN - distance function for DTW, use euc.dist or euc.dist1d, however you can define any function that can opperates on x1 and x2,
\item ylab - label on Y axis of the results plot,
\item legend - part of the legend sting over plots,
\item plotRGL - name of the body joint for which DTW alignment of x1 and x2 will be drawn. It will be 3D rgl plot. If plotRGL = NULL plot will not be drawn.
\item skeleton - object of class mocap. It is used to get joints relations while plotting RGL plot.
}}

\item{ref.d}{data frame with reference mocap data (default is ref.d=NULL). It is used to get joints relations while plotting RGL plot.}

\item{in.d}{data frame with reference mocap data (default is in.d=NULL). It is used to get joints relations while plotting RGL plot.}

\item{extremumtreshold}{treshold from range [0,1], that is used to remove local extreme, which realtive value is below extremumtreshold (default value is extremumtreshold=0.66).}

\item{smoothSize}{size of the gaussian smoothing window. Deafult value is smoothSize = 0.1.}
}
\description{
This procedure detects highest differences between reference and input mocap recording. Analysis goes as follows:
\itemize{
\item Perform DTW on x1 and x2 from list at index 1. Plot DTW alignment This alignment will be used in aligning all other signals. Plot distance between x1 and x2 after alignment and find local maxima in this plot.
In following analysis only maxima with relative value above treshold will be used.
\item perform DTW alignment for each other element from the data.configuration list, however use the alignment function from first step. Maxima are detected in the same procedure as above, however we take into account only those
of them, that are close enough to maxims from first step of analysis.
}
}
\examples{
########################
#analyze upper body data
########################
data(right.arm.motion.1)
data(right.arm.motion.2)

refdata <- right.arm.motion.1$data.frame
inputdata <- right.arm.motion.2$data.frame

extremumtreshold <- 0.66
smoothSize <- 0.1

inputdataalignment <- rotatedata(inputdata, refdata, "LeftShoulder","RightShoulder")
inputdataalignmentkinematic <- calculate.kinematic(inputdataalignment, bodypartname = "LeftShoulder")
refdatakinematic <- calculate.kinematic(refdata, bodypartname = "LeftShoulder")
inputdataalignmentkinematic <- aligninputandrefdata(inputdataalignmentkinematic, refdatakinematic, limbname = "LeftShoulder")
analyzerange <- ceiling(nrow(inputdataalignment) * smoothSize * 1) #sprawdzia, jaki powinien bya ten przedzia3!

data.configuration <- list()
data.configuration[[1]] <- list(x1 = vector.to.list(refdatakinematic, "RightHand"),
   x2 = vector.to.list(inputdataalignmentkinematic, "RightHand"),
   FUN = euc.dist,
   ylab = "Distance [cm]",
   legend = "RightHand",
   plotRGL = "RightHand",
   skeleton = right.arm.motion.1)

data.configuration[[2]] <- list(x1 = vector.to.angles.list(refdatakinematic, "RightShoulder", "RightArm", "RightForearm"),
   x2 = vector.to.angles.list(inputdataalignmentkinematic, "RightShoulder", "RightArm", "RightForearm"),
   FUN = euc.dist1d,
   ylab = "Angle [rad]",
   legend = "Right elbow",
   plotRGL = NULL,
   skeleton = NULL)

x1 <- vector.to.angles.frame.list(refdatakinematic, "RightArm", "RightForearm", "RightShoulder", "LeftShoulder")
x2 <- vector.to.angles.frame.list(inputdataalignmentkinematic, "RightArm", "RightForearm", "RightShoulder", "LeftShoulder")

data.configuration[[3]] <- list(x1 = x1[[1]],
   x2 = x2[[1]],
   FUN = euc.dist1d,
   ylab = "Angle [rad]",
   legend = "X angle between RightArm and RightForearm",
   plotRGL = NULL,
   skeleton = NULL)

data.configuration[[4]] <- list(x1 = x1[[2]],
   x2 = x2[[2]],
   FUN = euc.dist1d,
   ylab = "Angle [rad]",
   legend = "Y angle between RightArm and RightForearm",
   plotRGL = NULL,
   skeleton = NULL)

data.configuration[[5]] <- list(x1 = x1[[3]],
   x2 = x2[[3]],
   FUN = euc.dist1d,
   ylab = "Angle [rad]",
   legend = "Z angle between RightArm and RightForearm",
   plotRGL = NULL,
   skeleton = NULL)

analyze.mocap(data.configuration,
refdatakinematic,
inputdataalignmentkinematic,
extremumtreshold,
smoothSize)

########################
#analyze lower body data
########################
data(mawashi.geri.left.1)
data(mawashi.geri.left.2)

refdata <- mawashi.geri.left.1$data.frame
inputdata <- mawashi.geri.left.2$data.frame
extremumtreshold <- 0.66
smoothSize <- 0.1

inputdataalignment <- rotatedata(inputdata, refdata, "LeftThigh","RightThigh")
inputdataalignmentkinematic <- calculate.kinematic(inputdataalignment, bodypartname = "RightFoot")
refdatakinematic <- calculate.kinematic(refdata, bodypartname = "RightFoot")
inputdataalignmentkinematic <- aligninputandrefdata(inputdataalignmentkinematic, refdatakinematic, limbname = "RightFoot")
analyzerange <- ceiling(nrow(inputdataalignment) * smoothSize * 1) #sprawdzia, jaki powinien bya ten przedzia3!

data.configuration <- list()
data.configuration[[1]] <- list(x1 = vector.to.list(refdatakinematic, "LeftFoot"),
 x2 = vector.to.list(inputdataalignmentkinematic, "LeftFoot"),
 FUN = euc.dist,
 ylab = "Distance [cm]",
  legend = "LeftFoot",
  plotRGL = "LeftFoot",
  skeleton = mawashi.geri.left.1)

data.configuration[[2]] <- list(x1 = vector.to.angles.list(refdatakinematic, "LeftThigh", "LeftLeg", "LeftFoot"),
  x2 = vector.to.angles.list(inputdataalignmentkinematic, "LeftThigh", "LeftLeg", "LeftFoot"),
  FUN = euc.dist1d,
  ylab = "Angle [rad]",
  legend = "Left knee",
  plotRGL = NULL)

x1 <- vector.to.angles.frame.list(refdatakinematic, "LeftThigh", "LeftLeg", "LeftThigh","RightThigh")
x2 <- vector.to.angles.frame.list(inputdataalignmentkinematic, "LeftThigh", "LeftLeg", "LeftThigh","RightThigh")

data.configuration[[3]] <- list(x1 = x1[[1]],
  x2 = x2[[1]],
  FUN = euc.dist1d,
  ylab = "Angle [rad]",
  legend = "X angle between LeftThigh and LeftLeg",
  plotRGL = NULL)

data.configuration[[4]] <- list(x1 = x1[[2]],
  x2 = x2[[2]],
  FUN = euc.dist1d,
  ylab = "Angle [rad]",
  legend = "Y angle between LeftThigh and LeftLeg",
  plotRGL = NULL)

data.configuration[[5]] <- list(x1 = x1[[3]],
  x2 = x2[[3]],
  FUN = euc.dist1d,
  ylab = "Angle [rad]",
  legend = "Z angle between LeftThigh and LeftLeg",
  plotRGL = NULL)

analyze.mocap(data.configuration,
refdatakinematic,
inputdataalignmentkinematic,
extremumtreshold,
smoothSize)
}
